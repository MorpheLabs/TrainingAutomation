# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/trusty32"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.123.201"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./shared", "/shared"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
   vb.memory = "1024"
  #		# Customizing the amount of CPU's for the VM as it will itself be a host to virtualbox
   vb.cpus = "1"
  #		# Set Videomemory to max (128MB) to allow for guest OS autoscaling
  vb.customize ["modifyvm", :id, "--vram", "128"]
  #		# Set Video 2D/3D acceleration on
  # vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
  # vb.customize ["modifyvm", :id, "--accelerate2dvideo", "on"]
  #		# Enable the use of hardware virtualization extensions
  #   vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
  #		#  Add Storage controller to connect the DVD to
  # vb.customize ["storagectl", :id, "--name", "IDE Controller", "--add", "ide"]
  #		# Attach DVD drive to VM
  # vb.customize ["storageattach", :id, "--storagectl", "IDE", "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", "emptydrive"]
  #		# Set name to Koda
   vb.name = "Node1"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
   sudo apt-get install software-properties-common
	 echo "---- Provisioner: Organizing Repositories for Java and Jenkins"
		sudo add-apt-repository ppa:openjdk-r/ppa -y
		wget -q -nc -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
		sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
		sudo apt-get update
	 
	 echo "---- Provisioner: Installing Virtualbox Additions"
		sudo apt-get install -y dkms
		sudo apt-get install -y build-essential linux-headers-$(uname -r)
		sudo apt-get install -y virtualbox-guest-dkms
		sudo apt-get install -y virtualbox-guest-utils
	 
	 echo "---- Provisioner: Installing Systemd to enable SystemCTL commands"
	 	 sudo apt-get install -y systemd
	 
	 echo "---- Provisioner: Installing Java-8 (Jenkins Prequisites)"
	 	 sudo apt-get install -y openjdk-8-jdk
	 
	 echo "---- Provisioner: Installing Jenkins"
		sudo apt-get install -y jenkins
	 
	 echo "---- Provisioner: Opening port 8080"
	 sudo ufw allow 8080
	 sudo ufw status
	 
	 echo "---- Provisioner: Allow ServiceStartup Time Jenkins before checking status, copying default pass"
	 sleep 30s
	 systemctl status jenkins
	 
	 echo "---- Copying initial Password to /shared"
	 sudo scp /var/lib/jenkins/secrets/initialAdminPassword /shared/initialAdminPassword.txt
	
	echo "---- Stream Edit Hudson.Model.Updatecenter.xml "
	 sudo sed 's/https/http' /var/lib/jenkins/hudson.model.Updatecenter.xml
		     
			 SHELL
end
